[{"D:\\projects\\total-cyphers\\front\\src\\App.tsx":"1","D:\\projects\\total-cyphers\\front\\src\\index.tsx":"2","D:\\projects\\total-cyphers\\front\\src\\modules\\index.ts":"3","D:\\projects\\total-cyphers\\front\\src\\Layout\\Header.tsx":"4","D:\\projects\\total-cyphers\\front\\src\\Layout\\MainPageBody.tsx":"5","D:\\projects\\total-cyphers\\front\\src\\Layout\\Footer.tsx":"6","D:\\projects\\total-cyphers\\front\\src\\inc\\UserInfo.tsx":"7","D:\\projects\\total-cyphers\\front\\src\\Components\\UserInfoSec.tsx":"8","D:\\projects\\total-cyphers\\front\\src\\Components\\PlayedInfoSec.tsx":"9","D:\\projects\\total-cyphers\\front\\src\\Components\\PlayedInfoDetailRow.tsx":"10","D:\\projects\\total-cyphers\\front\\src\\Components\\PlayedInfoDetail.tsx":"11","D:\\projects\\total-cyphers\\front\\src\\Components\\PlayListSec.tsx":"12","D:\\projects\\total-cyphers\\front\\src\\modules\\sagas.ts":"13","D:\\projects\\total-cyphers\\front\\src\\Components\\UserSearchBar.tsx":"14","D:\\projects\\total-cyphers\\front\\src\\modules\\totalCyphers.ts":"15","D:\\projects\\total-cyphers\\front\\src\\reportWebVitals.ts":"16"},{"size":690,"mtime":1606722166564,"results":"17","hashOfConfig":"18"},{"size":1547,"mtime":1606734566174,"results":"19","hashOfConfig":"18"},{"size":510,"mtime":1606725255998,"results":"20","hashOfConfig":"18"},{"size":1939,"mtime":1606722194842,"results":"21","hashOfConfig":"18"},{"size":3805,"mtime":1606720303702,"results":"22","hashOfConfig":"18"},{"size":1047,"mtime":1606722254107,"results":"23","hashOfConfig":"18"},{"size":1314,"mtime":1606722552579,"results":"24","hashOfConfig":"18"},{"size":7583,"mtime":1606723030171,"results":"25","hashOfConfig":"18"},{"size":11711,"mtime":1606723816028,"results":"26","hashOfConfig":"18"},{"size":7323,"mtime":1606725174294,"results":"27","hashOfConfig":"18"},{"size":6587,"mtime":1606724873050,"results":"28","hashOfConfig":"18"},{"size":2975,"mtime":1606725393586,"results":"29","hashOfConfig":"18"},{"size":5410,"mtime":1606725757533,"results":"30","hashOfConfig":"18"},{"size":2620,"mtime":1606728010258,"results":"31","hashOfConfig":"18"},{"size":3863,"mtime":1606542703973,"results":"32","hashOfConfig":"18"},{"size":440,"mtime":1605412889025,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1urgn0",{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\projects\\total-cyphers\\front\\src\\App.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\index.tsx",["69","70"],"D:\\projects\\total-cyphers\\front\\src\\modules\\index.ts",[],[],"D:\\projects\\total-cyphers\\front\\src\\Layout\\Header.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Layout\\MainPageBody.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Layout\\Footer.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\inc\\UserInfo.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Components\\UserInfoSec.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Components\\PlayedInfoSec.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Components\\PlayedInfoDetailRow.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Components\\PlayedInfoDetail.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\Components\\PlayListSec.tsx",[],"D:\\projects\\total-cyphers\\front\\src\\modules\\sagas.ts",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nexport const SEARCH_USER_NICKNAME_REQUEST = \"totalCyphers/SEARCH_USER_NICKNAME_REQUEST\" as const;\r\nexport const SEARCH_USER_NICKNAME_SUCCESS = \"totalCyphers/SEARCH_USER_NICKNAME_SUCCESS\" as const;\r\nexport const SEARCH_USER_NICKNAME_FAILURE = \"totalCyphers/SEARCH_USER_NICKNAME_FAILURE\" as const;\r\nexport const GET_USER_INFO_REQUEST = \"totalCyphers/GET_USER_INFO_REQUEST\" as const;\r\nexport const GET_USER_INFO_SUCCESS = \"totalCyphers/GET_USER_INFO_SUCCESS\" as const;\r\nexport const GET_USER_INFO_FAILURE = \"totalCyphers/GET_USER_INFO_FAILURE\" as const;\r\nexport const GET_USER_PLAYLIST_REQUEST = \"totalCyphers/GET_USER_PLAYLIST_REQUEST\" as const;\r\nexport const GET_USER_PLAYLIST_SUCCESS = \"totalCyphers/GET_USER_PLAYLIST_SUCCESS\" as const;\r\nexport const GET_USER_PLAYLIST_FAILURE = \"totalCyphers/GET_USER_PLAYLIST_FAILURE\" as const;\r\nexport const GET_GAME_DETAIL_REQUEST = \"totalCyphers/GET_GAME_DETAIL_REQUEST\" as const;\r\nexport const GET_GAME_DETAIL_SUCCESS = \"totalCyphers/GET_GAME_DETAIL_SUCCESS\" as const;\r\nexport const GET_GAME_DETAIL_FAILURE = \"totalCyphers/GET_GAME_DETAIL_FAILURE\" as const;\r\n\r\n// 응답 액션 정의\r\n// 유저 닉네임으로 검색\r\nexport const searchUserSuccess = (data: any) => {\r\n  return {\r\n    type: SEARCH_USER_NICKNAME_SUCCESS,\r\n    payload: {\r\n      searchedPlayers: data.rows,\r\n    },\r\n  };\r\n};\r\nexport const searchUserFailed = (err: any) => ({\r\n  type: SEARCH_USER_NICKNAME_FAILURE,\r\n  payload: {\r\n    searchUserErrorReason: err,\r\n  },\r\n});\r\n// 특정 유저 정보 요청\r\nexport const getUserInfoFailed = (err: any) => ({\r\n  type: GET_USER_INFO_FAILURE,\r\n  payload: {\r\n    getUserInfoErrorReason: err,\r\n  },\r\n});\r\n\r\n// sagas\r\n// 특정 유저 정보 요청\r\nexport function* getUserInfo(data: any) {\r\n  yield getUserById(data.payload.userId);\r\n}\r\nfunction* getUserById(data: string) {\r\n  try {\r\n    const payloadData = {\r\n      method: \"post\",\r\n      url: `http://localhost:5000/proxy/totalcyphers`,\r\n      data: {\r\n        reqMethod: \"getUserInfoById\",\r\n        payload: {\r\n          userId: data,\r\n        },\r\n      },\r\n    };\r\n    const result = yield call(callAPI, payloadData);\r\n    yield put({\r\n      type: GET_USER_INFO_SUCCESS,\r\n      payload: {\r\n        focusedUser: result.data,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    yield put(getUserInfoFailed(error));\r\n  }\r\n}\r\n\r\n// 유저 닉네임으로 검색\r\nexport function* searchUserNickname(data: any) {\r\n  yield searchByNickname(data.payload.nickname);\r\n}\r\n\r\nfunction* searchByNickname(data: string) {\r\n  try {\r\n    const payloadData = {\r\n      method: \"post\",\r\n      url: `http://localhost:5000/proxy/totalcyphers`,\r\n      data: {\r\n        reqMethod: \"getUserByNickname\",\r\n        payload: {\r\n          nickname: data,\r\n          wordType: \"full\",\r\n        },\r\n      },\r\n    };\r\n    const result = yield call(callAPI, payloadData);\r\n    yield put({\r\n      type: SEARCH_USER_NICKNAME_SUCCESS,\r\n      payload: {\r\n        searchedPlayers: result.data.rows,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    yield put(searchUserFailed(error));\r\n  }\r\n}\r\n\r\n// 유저 전적 검색\r\nfunction* getPlayList(data: any) {\r\n  yield getPlayListByUserId(\r\n    data.payload.userId,\r\n    data.payload.playType,\r\n    data.payload.searchStartRange,\r\n    data.payload.searchEndRange\r\n  );\r\n}\r\nfunction* getPlayListByUserId(\r\n  userId: string,\r\n  playType: string,\r\n  searchStartRange: string,\r\n  searchEndRange: string\r\n) {\r\n  try {\r\n    const payloadData = {\r\n      method: \"post\",\r\n      url: `http://localhost:5000/proxy/totalcyphers`,\r\n      data: {\r\n        reqMethod: \"getUserPlayList\",\r\n        payload: {\r\n          userId,\r\n          playType,\r\n          searchStartRange,\r\n          searchEndRange,\r\n        },\r\n      },\r\n    };\r\n    const result = yield call(callAPI, payloadData);\r\n    yield put({\r\n      type: GET_USER_PLAYLIST_SUCCESS,\r\n      payload: {\r\n        playedRecords: result.data.matches.rows,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: GET_USER_PLAYLIST_FAILURE,\r\n      payload: {\r\n        getUserPlaylistFailReason: error,\r\n      },\r\n    });\r\n  }\r\n}\r\n// 게임전적 디테일\r\nfunction* getGameDetail(data: any) {\r\n  yield getGameDetailByMatchId(data.payload.matchId);\r\n}\r\nfunction* getGameDetailByMatchId(matchId: string) {\r\n  try {\r\n    const payloadData = {\r\n      method: \"post\",\r\n      url: `http://localhost:5000/proxy/totalcyphers`,\r\n      data: {\r\n        reqMethod: \"getGameDetail\",\r\n        payload: {\r\n          matchId,\r\n        },\r\n      },\r\n    };\r\n    const result = yield call(callAPI, payloadData);\r\n    yield put({\r\n      type: GET_GAME_DETAIL_SUCCESS,\r\n      payload: {\r\n        matchId,\r\n        playedRecords: result.data,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: GET_GAME_DETAIL_FAILURE,\r\n      payload: {\r\n        matchId,\r\n        getGameDetailFailReason: error,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n// API 요청 통일 됨\r\nfunction callAPI(payload: any) {\r\n  return axios.post(\"http://localhost:5000/proxy/totalcyphers/\", payload);\r\n}\r\n\r\nexport default function* totalCyphersSaga() {\r\n  yield takeLatest(SEARCH_USER_NICKNAME_REQUEST, searchUserNickname);\r\n  yield takeLatest(GET_USER_INFO_REQUEST, getUserInfo);\r\n  yield takeLatest(GET_USER_PLAYLIST_REQUEST, getPlayList);\r\n  yield takeLatest(GET_GAME_DETAIL_REQUEST, getGameDetail);\r\n}\r\n","D:\\projects\\total-cyphers\\front\\src\\Components\\UserSearchBar.tsx",["90"],"D:\\projects\\total-cyphers\\front\\src\\modules\\totalCyphers.ts",["91","92","93","94","95","96","97","98","99","100","101","102","103"],"import {\r\n  SEARCH_USER_NICKNAME_REQUEST,\r\n  SEARCH_USER_NICKNAME_SUCCESS,\r\n  SEARCH_USER_NICKNAME_FAILURE,\r\n  GET_USER_INFO_REQUEST,\r\n  GET_USER_INFO_SUCCESS,\r\n  GET_USER_INFO_FAILURE,\r\n  GET_USER_PLAYLIST_REQUEST,\r\n  GET_USER_PLAYLIST_SUCCESS,\r\n  GET_USER_PLAYLIST_FAILURE,\r\n  GET_GAME_DETAIL_REQUEST,\r\n  GET_GAME_DETAIL_SUCCESS,\r\n  GET_GAME_DETAIL_FAILURE,\r\n  searchUserSuccess,\r\n  searchUserFailed,\r\n} from \"./sagas\";\r\n\r\n// 액션 타입 선언\r\nconst RESET_SEARCHED_USER_LIST = \"totalCyphers/RESET_SEARCHED_USER_LIST\" as const;\r\nconst SET_CURRENT_URL = \"totalCyphers/SET_CURRENT_URL\" as const;\r\n\r\n// 액션 생성함수 선언\r\nexport const searchUserByNickname = (nickname: string) => ({\r\n  type: SEARCH_USER_NICKNAME_REQUEST,\r\n  payload: {\r\n    nickname,\r\n  },\r\n});\r\nexport const getUserByUserId = (userId: string) => ({\r\n  type: GET_USER_INFO_REQUEST,\r\n  payload: {\r\n    userId,\r\n  },\r\n});\r\nexport const getUserPlayList = (\r\n  userId: string,\r\n  playType: string,\r\n  searchStartRange: string,\r\n  searchEndRange: string\r\n) => ({\r\n  type: GET_USER_PLAYLIST_REQUEST,\r\n  payload: {\r\n    userId,\r\n    playType,\r\n    searchStartRange,\r\n    searchEndRange,\r\n  },\r\n});\r\nexport const getGameDetail = (matchId: string) => ({\r\n  type: GET_GAME_DETAIL_REQUEST,\r\n  payload: {\r\n    matchId,\r\n  },\r\n});\r\n\r\nexport const resetSearchUserList = {\r\n  type: RESET_SEARCHED_USER_LIST,\r\n};\r\n\r\nexport const setCurrentUrl = (currentUrl: string) => ({\r\n  type: SET_CURRENT_URL,\r\n  payload: {\r\n    url: currentUrl,\r\n  },\r\n});\r\n\r\n// 액션 객체 타입\r\ntype TotalCyphersAction =\r\n  | ReturnType<typeof searchUserSuccess>\r\n  | ReturnType<typeof searchUserFailed>;\r\n\r\n// 기본값 타입\r\nexport type totalCypherState = {\r\n  searchedPlayers: Array<any>;\r\n  searchUserErrorReason: string;\r\n  focusedUser: any;\r\n  playedRecords: Array<any>;\r\n  getUserPlaylistFailReason: string;\r\n  getUserInfoFailReason: string;\r\n  currentUrl: string;\r\n};\r\n\r\n// type searchedPlayersArray = {};\r\n\r\n// 기본값\r\nexport const initialState: totalCypherState = {\r\n  searchedPlayers: [],\r\n  searchUserErrorReason: \"\",\r\n  focusedUser: \"\",\r\n  playedRecords: [],\r\n  getUserPlaylistFailReason: \"\",\r\n  getUserInfoFailReason: \"\",\r\n  currentUrl: \"\",\r\n};\r\n\r\n// 리듀서\r\nexport default function totalCyphersReducer(\r\n  state: totalCypherState = initialState,\r\n  action: any\r\n): totalCypherState {\r\n  switch (action.type) {\r\n    case SET_CURRENT_URL: {\r\n      return {\r\n        ...state,\r\n        currentUrl: action.payload.url,\r\n      };\r\n    }\r\n    case SEARCH_USER_NICKNAME_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        searchedPlayers: action.payload.searchedPlayers,\r\n      };\r\n    }\r\n    case SEARCH_USER_NICKNAME_FAILURE: {\r\n      return {\r\n        ...state,\r\n        searchedPlayers: action.payload,\r\n      };\r\n    }\r\n    case GET_USER_INFO_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        focusedUser: action.payload.focusedUser,\r\n      };\r\n    }\r\n    case GET_USER_INFO_FAILURE: {\r\n      return {\r\n        ...state,\r\n        getUserInfoFailReason: action.payload.getUserInfoErrorReason,\r\n      };\r\n    }\r\n    case RESET_SEARCHED_USER_LIST: {\r\n      return {\r\n        ...state,\r\n        searchedPlayers: [],\r\n      };\r\n    }\r\n    case GET_USER_PLAYLIST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        playedRecords: action.payload.playedRecords,\r\n      };\r\n    }\r\n    case GET_USER_PLAYLIST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        getUserPlaylistFailReason: action.payload.getUserPlaylistFailReason,\r\n      };\r\n    }\r\n    case GET_GAME_DETAIL_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        playedRecords: state.playedRecords.map((data, index) =>\r\n          data.matchId === action.payload.matchId\r\n            ? { ...data, matchDetail: action.payload.playedRecords }\r\n            : data\r\n        ),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\projects\\total-cyphers\\front\\src\\reportWebVitals.ts",["104"],{"ruleId":"105","severity":1,"message":"106","line":23,"column":7,"nodeType":"107","messageId":"108","endLine":23,"endColumn":15},{"ruleId":"105","severity":1,"message":"109","line":28,"column":7,"nodeType":"107","messageId":"108","endLine":28,"endColumn":23},{"ruleId":"110","severity":1,"message":"111","line":19,"column":34,"nodeType":"112","messageId":"113","endLine":19,"endColumn":48},{"ruleId":"110","severity":1,"message":"114","line":19,"column":35,"nodeType":"107","messageId":"115","endLine":19,"endColumn":44},{"ruleId":"116","severity":1,"message":"117","line":19,"column":41,"nodeType":"118","messageId":"119","endLine":19,"endColumn":44,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"111","line":27,"column":33,"nodeType":"112","messageId":"113","endLine":27,"endColumn":46},{"ruleId":"110","severity":1,"message":"121","line":27,"column":34,"nodeType":"107","messageId":"115","endLine":27,"endColumn":42},{"ruleId":"116","severity":1,"message":"117","line":27,"column":39,"nodeType":"118","messageId":"119","endLine":27,"endColumn":42,"suggestions":"122"},{"ruleId":"110","severity":1,"message":"111","line":34,"column":34,"nodeType":"112","messageId":"113","endLine":34,"endColumn":47},{"ruleId":"110","severity":1,"message":"121","line":34,"column":35,"nodeType":"107","messageId":"115","endLine":34,"endColumn":43},{"ruleId":"116","severity":1,"message":"117","line":34,"column":40,"nodeType":"118","messageId":"119","endLine":34,"endColumn":43,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"111","line":43,"column":8,"nodeType":"124","messageId":"113","endLine":43,"endColumn":40},{"ruleId":"110","severity":1,"message":"114","line":43,"column":30,"nodeType":"107","messageId":"115","endLine":43,"endColumn":39},{"ruleId":"116","severity":1,"message":"117","line":43,"column":36,"nodeType":"118","messageId":"119","endLine":43,"endColumn":39,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"111","line":71,"column":8,"nodeType":"124","messageId":"113","endLine":71,"endColumn":47},{"ruleId":"110","severity":1,"message":"114","line":71,"column":37,"nodeType":"107","messageId":"115","endLine":71,"endColumn":46},{"ruleId":"116","severity":1,"message":"117","line":71,"column":43,"nodeType":"118","messageId":"119","endLine":71,"endColumn":46,"suggestions":"126"},{"ruleId":"116","severity":1,"message":"117","line":101,"column":29,"nodeType":"118","messageId":"119","endLine":101,"endColumn":32,"suggestions":"127"},{"ruleId":"116","severity":1,"message":"117","line":146,"column":31,"nodeType":"118","messageId":"119","endLine":146,"endColumn":34,"suggestions":"128"},{"ruleId":"116","severity":1,"message":"117","line":181,"column":27,"nodeType":"118","messageId":"119","endLine":181,"endColumn":30,"suggestions":"129"},{"ruleId":"110","severity":1,"message":"111","line":185,"column":16,"nodeType":"124","messageId":"113","endLine":185,"endColumn":44},{"ruleId":"116","severity":1,"message":"117","line":34,"column":33,"nodeType":"118","messageId":"119","endLine":34,"endColumn":36,"suggestions":"130"},{"ruleId":"105","severity":1,"message":"131","line":13,"column":3,"nodeType":"107","messageId":"108","endLine":13,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":23,"column":37,"nodeType":"112","messageId":"113","endLine":23,"endColumn":58},{"ruleId":"110","severity":1,"message":"111","line":29,"column":32,"nodeType":"112","messageId":"113","endLine":29,"endColumn":51},{"ruleId":"110","severity":1,"message":"111","line":35,"column":32,"nodeType":"112","messageId":"113","endLine":40,"endColumn":5},{"ruleId":"110","severity":1,"message":"111","line":49,"column":30,"nodeType":"112","messageId":"113","endLine":49,"endColumn":50},{"ruleId":"110","severity":1,"message":"111","line":60,"column":30,"nodeType":"112","messageId":"113","endLine":60,"endColumn":53},{"ruleId":"105","severity":1,"message":"132","line":68,"column":6,"nodeType":"107","messageId":"108","endLine":68,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":74,"column":26,"nodeType":"118","messageId":"119","endLine":74,"endColumn":29,"suggestions":"133"},{"ruleId":"116","severity":1,"message":"117","line":76,"column":16,"nodeType":"118","messageId":"119","endLine":76,"endColumn":19,"suggestions":"134"},{"ruleId":"116","severity":1,"message":"117","line":77,"column":24,"nodeType":"118","messageId":"119","endLine":77,"endColumn":27,"suggestions":"135"},{"ruleId":"110","severity":1,"message":"136","line":99,"column":3,"nodeType":"107","messageId":"115","endLine":99,"endColumn":14},{"ruleId":"116","severity":1,"message":"117","line":99,"column":11,"nodeType":"118","messageId":"119","endLine":99,"endColumn":14,"suggestions":"137"},{"ruleId":"105","severity":1,"message":"138","line":153,"column":55,"nodeType":"107","messageId":"108","endLine":153,"endColumn":60},{"ruleId":"110","severity":1,"message":"111","line":3,"column":25,"nodeType":"112","messageId":"113","endLine":3,"endColumn":57},"@typescript-eslint/no-unused-vars","'enhancer' is assigned a value but never used.","Identifier","unusedVar","'composeEnhancers' is assigned a value but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'data' should be typed with a non-any type.","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["139","140"],"Argument 'err' should be typed with a non-any type.",["141","142"],["143","144"],"FunctionDeclaration",["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],"'GET_GAME_DETAIL_FAILURE' is defined but never used.","'TotalCyphersAction' is defined but never used.",["157","158"],["159","160"],["161","162"],"Argument 'action' should be typed with a non-any type.",["163","164"],"'index' is defined but never used.",{"messageId":"165","fix":"166","desc":"167"},{"messageId":"168","fix":"169","desc":"170"},{"messageId":"165","fix":"171","desc":"167"},{"messageId":"168","fix":"172","desc":"170"},{"messageId":"165","fix":"173","desc":"167"},{"messageId":"168","fix":"174","desc":"170"},{"messageId":"165","fix":"175","desc":"167"},{"messageId":"168","fix":"176","desc":"170"},{"messageId":"165","fix":"177","desc":"167"},{"messageId":"168","fix":"178","desc":"170"},{"messageId":"165","fix":"179","desc":"167"},{"messageId":"168","fix":"180","desc":"170"},{"messageId":"165","fix":"181","desc":"167"},{"messageId":"168","fix":"182","desc":"170"},{"messageId":"165","fix":"183","desc":"167"},{"messageId":"168","fix":"184","desc":"170"},{"messageId":"165","fix":"185","desc":"167"},{"messageId":"168","fix":"186","desc":"170"},{"messageId":"165","fix":"187","desc":"167"},{"messageId":"168","fix":"188","desc":"170"},{"messageId":"165","fix":"189","desc":"167"},{"messageId":"168","fix":"190","desc":"170"},{"messageId":"165","fix":"191","desc":"167"},{"messageId":"168","fix":"192","desc":"170"},{"messageId":"165","fix":"193","desc":"167"},{"messageId":"168","fix":"194","desc":"170"},"suggestUnknown",{"range":"195","text":"196"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"195","text":"197"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"198","text":"196"},{"range":"198","text":"197"},{"range":"199","text":"196"},{"range":"199","text":"197"},{"range":"200","text":"196"},{"range":"200","text":"197"},{"range":"201","text":"196"},{"range":"201","text":"197"},{"range":"202","text":"196"},{"range":"202","text":"197"},{"range":"203","text":"196"},{"range":"203","text":"197"},{"range":"204","text":"196"},{"range":"204","text":"197"},{"range":"205","text":"196"},{"range":"205","text":"197"},{"range":"206","text":"196"},{"range":"206","text":"197"},{"range":"207","text":"196"},{"range":"207","text":"197"},{"range":"208","text":"196"},{"range":"208","text":"197"},{"range":"209","text":"196"},{"range":"209","text":"197"},[1260,1263],"unknown","never",[1431,1434],[1595,1598],[1761,1764],[2408,2411],[3100,3103],[4124,4127],[4905,4908],[1016,1019],[1678,1681],[1734,1737],[1763,1766],[2258,2261]]